import java.nio.file.Paths

// overwrites a module if it has been specified in the parameters.
def check_modules(module) {
	
	if (params["modules"]) {

		def name = module.split("/")[0]
		def names =  params["modules"].collect{ it.split("/")[0] }
		def index = names.findIndexOf{ it.toString() == name }

		def m = (index != -1) ? params["modules"][index] : module

		return m

	} else {

		return module
	}
}

// the default modules for the pipeline
default_modules {

	anaconda = "Anaconda2/5.1.0"
	cutadapt = "cutadapt/1.5-goolf-1.4.10-Python-2.7.10"
	fastqc = "FastQC/0.11.7-Java-1.8.0_162"
	multiqc = "multiqc/1.2-2016b-Python-2.7.12"
	pandas = "pandas/0.16.2-2016b-Python-2.7.12"
	picard = "picard/2.1.1-Java-1.8.0_92"
	//r = "R/3.4.0-intel-2017a-X11-20170314"
	r = "R/3.4.3-foss-2016b-BABS"
	rnaseqc = "RNA-SeQC/1.1.8-Java-1.7.0_80"
	rsem = "RSEM/1.3.0-foss-2016b"
	rseqc = "RSeQC/2.6.4-foss-2016b-Python-2.7.12-R-3.3.1"
	samtools = "SAMtools/1.3.1-foss-2016b"
	star = "STAR/2.5.2a-foss-2016b"
}

// individual processes configuration
process {

	publish_mode = "link"
	publish_overwrite = true
	beforeScript = "module purge"
	executor = "slurm"
	cpus = 32
	memory = "6000"
	
	$experimental_factors {
		executor = "local"
		module = [ { check_modules( default_modules["pandas"] ) } ]
	}

	$conditions {
		executor = "local"
		module = [ { check_modules( default_modules["pandas"] ) } ]
	}

	$factor_comparisons {
		executor = "local"
		module = [ { check_modules( default_modules["pandas"] ) } ]
	}

	$sample_comparisons {
		executor = "local"
		module = [ { check_modules( default_modules["pandas"] ) } ]
	}

	$read_length {
		executor = "local"
		cpus = 1
		memory = 1000
	}

	$ebrootpicard {
		module = [ { check_modules( default_modules["picard"] ) } ]
	}

	$ebrootrnaminseqc {
		module = [ { check_modules( default_modules["rnaseqc"] ) } ]
	}

	$fastqc {

		module = [ { check_modules( default_modules["fastqc"] ) } ]

		publishDir = [
			path: { Paths.get( qc_dir, "fastqc", "raw" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$cutadapt {

		module = [ { check_modules( default_modules["cutadapt"] ) } ]

		publishDir = [
			path: { Paths.get( results_dir, "cutadapt" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$fastqc_cutadapt {

		module = [ { check_modules( default_modules["fastqc"] ) } ]

		publishDir = [
			path: { Paths.get( qc_dir, "fastqc", "cutadapt" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$rsem {

		module = [
			{ check_modules( default_modules["rsem"] ) },
			{ check_modules( default_modules["star"] ) }
		]

		publishDir = [
			path: { Paths.get( results_dir, "rsem" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$md5_raw {

		publishDir = [
			path: { Paths.get( results_dir, "rsem" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}
	
	$md5_processed {

		publishDir = [
			path: { Paths.get( results_dir, "rsem" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$sort_index {

		module = [ { check_modules( default_modules["samtools"] ) } ]

		publishDir = [
			path: { Paths.get( results_dir, "rsem" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$group {

		module = [ { check_modules( default_modules["picard"] ) } ]

		publishDir = [
			path: { Paths.get( qc_dir, "picard", "group" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$index {

		module = [ { check_modules( default_modules["samtools"] ) } ]

		publishDir = [
			path: { Paths.get( qc_dir, "picard", "group" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$rnaseqmetrics {

		module = [ { check_modules( default_modules["picard"] ) } ]

		publishDir = [
			path: { Paths.get( qc_dir, "picard", "rnaseqmetrics" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$multimetrics {

		module = [
			{ check_modules( default_modules["picard"] ) },
			{ check_modules( default_modules["r"] ) }
		]

		publishDir = [
			path: { Paths.get( qc_dir, "picard", "multimetrics" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$complexity {

		module = [ { check_modules( default_modules["picard"] ) } ]

		publishDir = [
			path: { Paths.get( qc_dir, "picard", "complexity" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$duplicates {

		module = [ { check_modules( default_modules["picard"] ) } ]

		publishDir = [
			path: { Paths.get( qc_dir, "picard", "duplicates" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$infer_experiment {

		module = [ { check_modules( default_modules["rseqc"] ) } ]

		publishDir = [
			path: { Paths.get( qc_dir, "rseqc", "infer_experiment" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$junction_annotation {

		module = [ { check_modules( default_modules["rseqc"] ) } ]

		publishDir = [
			path: { Paths.get( qc_dir, "rseqc", "junction_annotation" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$junction_saturation {

		module = [ { check_modules( default_modules["rseqc"] ) } ]

		publishDir = [
			path: { Paths.get( qc_dir, "rseqc", "junction_saturation" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$mismatch_profile {

		module = [ { check_modules( default_modules["rseqc"] ) } ]

		publishDir = [
			path: { Paths.get( qc_dir, "rseqc", "mismatch_profile" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$read_distribution {

		module = [ { check_modules( default_modules["rseqc"] ) } ]

		publishDir = [
			path: { Paths.get( qc_dir, "rseqc", "read_distribution" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$transcript_integrity_number {

		module = [ { check_modules( default_modules["rseqc"] ) } ]

		publishDir = [
			path: { Paths.get( qc_dir, "rseqc", "transcript_integrity_number" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$rnaseqc {

		module = [ { check_modules( default_modules["picard"] ) },
		       	   { check_modules( default_modules["rnaseqc"] ) }
		]

		publishDir = [
			path: { Paths.get( qc_dir, "rnaseqc" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$build_matrix {

		executor = "local"

		module = [ { check_modules( default_modules["r"] ) } ]

		publishDir = [
			path: { Paths.get( results_dir, "analysis" ) },
			mode: publish_mode,
			overwrite: publish_overwrite,
			saveAs: { filename ->
				if ( filename.indexOf(".rda") != -1 ) {
					"rda/$filename"
				} else if ( filename.indexOf(".csv") != 1 ) {
					"csv/$filename"
				} else {
					null
				}
			}
		]
	}

	$add_condition_column {

		executor = "local"

		module = [ { check_modules( default_modules["r"] ) } ]

		publishDir = [
			path: { Paths.get( results_dir, "analysis", "rda" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$create_dds {

		executor = "local"

		module = [ { check_modules( default_modules["r"] ) } ]

		publishDir = [
			path: { Paths.get( results_dir, "analysis", "rda" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$create_vst {

		executor = "local"

		module = [ { check_modules( default_modules["r"] ) } ]

		publishDir = [
			path: { Paths.get( results_dir, "analysis", "rda" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$create_rlog {

		executor = "local"

		module = [ { check_modules( default_modules["r"] ) } ]

		publishDir = [
			path: { Paths.get( results_dir, "analysis", "rda" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$do_pca {

		executor = "local"

		module = [ { check_modules( default_modules["r"] ) } ]

		publishDir = [
			path: { Paths.get( results_dir, "analysis", "rda" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$pca_to_json {

		executor = "local"

		module = [ { check_modules( default_modules["r"] ) } ]

		publishDir = [
			path: { Paths.get( results_dir, "analysis", "json" ) },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}

	$multiqc {

		executor = "local"

		module = [
			{ check_modules( default_modules["anaconda"] ) }
		]

		publishDir = [
			path: { qc_dir },
			mode: publish_mode,
			overwrite: publish_overwrite
		]
	}
}

